// Generated by CoffeeScript 1.3.1
(function() {
  var AppView, Guerilla, api, deck, guerilla, isToday, today,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  deck = $.TmplDeck('templates.html');

  today = {
    month: (new Date).getMonth() + 1,
    day: (new Date).getDate()
  };

  isToday = function(dateStr) {
    if (dateStr.match(/^\d+/)[0] * 1 !== today.month) {
      return;
    }
    if (dateStr.match(/\d+$/)[0] * 1 !== today.day) {
      return;
    }
    return true;
  };

  $.fn.disableTd = function(group) {
    return this.each(function() {
      return $(this).removeClass('active');
    });
  };

  $.fn.enableTd = function(group) {
    return this.each(function() {
      var $td;
      $td = $(this);
      if ($td.data('group') !== group) {
        return;
      }
      return $td.addClass('active');
    });
  };

  $.fn.rememberGroup = function() {
    var disableAll, enable;
    disableAll = function() {
      return $('td:not(.type)').disableTd();
    };
    enable = function(group) {
      return $('td:not(.type)').enableTd(group);
    };
    return this.each(function() {
      var $el;
      $el = $(this);
      return $el.click(function() {
        var group;
        group = $el.data('group');
        disableAll();
        enable(group);
        return localStorage.setItem('mygroup', group);
      });
    });
  };

  api = {};

  api.fetchData = function(query) {
    return $.Deferred(function(defer) {
      return $.ajax({
        url: 'http://api.konolog.net/pad/',
        dataType: 'jsonp'
      }).pipe(function(res) {
        return defer.resolve(res);
      }, function() {
        return defer.reject();
      });
    }).promise();
  };

  Guerilla = (function(_super) {

    __extends(Guerilla, _super);

    Guerilla.name = 'Guerilla';

    function Guerilla() {
      return Guerilla.__super__.constructor.apply(this, arguments);
    }

    Guerilla.prototype.fetch = function() {
      return $.Deferred(function(defer) {
        return api.fetchData().then(function(data) {
          return defer.resolve(data);
        }, function() {
          return defer.reject();
        });
      });
    };

    Guerilla.prototype.update = function() {
      var _this = this;
      return $.Deferred(function(defer) {
        return _this.fetch().then(function(data) {
          _this._handleFetchedData(data);
          return _this.trigger('update');
        }, function() {
          return _this.trigger('error');
        });
      });
    };

    Guerilla.prototype._handleFetchedData = function(data) {
      _.each(data, function(day, i) {
        if (!isToday(day[0])) {
          return;
        }
        return day.today = true;
      });
      _.each(data, function(day, i) {
        var type;
        type = day[6];
        switch (type) {
          case 'M':
            return day[6] = 'ﾒﾀﾄﾞﾗ';
          case 'G':
            return day[6] = 'ｺﾞﾙﾄﾞﾗ';
        }
      });
      this.set('days', data);
      return this;
    };

    return Guerilla;

  })(Backbone.Model);

  guerilla = new Guerilla;

  AppView = (function(_super) {

    __extends(AppView, _super);

    AppView.name = 'AppView';

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.initialize = function() {
      var _this = this;
      guerilla.bind('update', function() {
        return _this.renderData();
      });
      guerilla.bind('error', function() {
        return _this.renderError();
      });
      return this;
    };

    AppView.prototype.renderData = function() {
      this.$el.html(deck.tmpl('table', guerilla.toJSON()));
      this._initInside();
      return this;
    };

    AppView.prototype.renderError = function() {
      this.$el.html(deck.draw('error'));
      this._initInside();
      return this;
    };

    AppView.prototype._initInside = function() {
      var cachedGroup;
      this.$('td:not(.type)').rememberGroup();
      cachedGroup = localStorage.getItem('mygroup');
      if (cachedGroup == null) {
        return this;
      }
      this.$('td:not(.type)').enableTd(cachedGroup);
      return this;
    };

    return AppView;

  })(Backbone.View);

  deck.load().done(function() {
    return $(function() {
      var view;
      view = new AppView({
        el: $('#root')
      });
      return guerilla.update();
    });
  });

}).call(this);
